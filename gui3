local httpService = game:GetService("HttpService")

local InterfaceManager = {} do
    InterfaceManager.Folder = "FluentSettings"
    InterfaceManager.Settings = {
        Theme = "SmoothRed", -- Set SmoothRed as the default theme
        Acrylic = true,
        Transparency = true,
        MenuKeybind = "LeftControl"
    }

    function InterfaceManager:SetFolder(folder)
        self.Folder = folder
        self:BuildFolderTree()
    end

    function InterfaceManager:SetLibrary(library)
        self.Library = library

        -- Ensure themes exist
        self.Library.Themes = self.Library.Themes or {}

        -- Existing Dark theme
        self.Library.Themes.Dark = {
            Name = "Dark",
            Accent = Color3.fromRGB(96, 205, 255),
            -- Other Dark theme properties as needed
        }

        -- Add SmoothRed theme
        self.Library.Themes.SmoothRed = {
            Name = "SmoothRed",
            Accent = Color3.fromRGB(255, 70, 70),

            AcrylicMain = Color3.fromRGB(50, 10, 10),
            AcrylicBorder = Color3.fromRGB(80, 20, 20),
            AcrylicGradient = ColorSequence.new(Color3.fromRGB(40, 10, 10), Color3.fromRGB(60, 15, 15)),
            AcrylicNoise = 0.85,

            TitleBarLine = Color3.fromRGB(90, 20, 20),
            Tab = Color3.fromRGB(110, 30, 30),

            Element = Color3.fromRGB(120, 40, 40),
            ElementBorder = Color3.fromRGB(50, 20, 20),
            InElementBorder = Color3.fromRGB(100, 40, 40),
            ElementTransparency = 0.85,

            ToggleSlider = Color3.fromRGB(130, 50, 50),
            ToggleToggled = Color3.fromRGB(200, 60, 60),

            SliderRail = Color3.fromRGB(140, 55, 55),

            DropdownFrame = Color3.fromRGB(160, 60, 60),
            DropdownHolder = Color3.fromRGB(50, 20, 20),
            DropdownBorder = Color3.fromRGB(45, 25, 25),
            DropdownOption = Color3.fromRGB(130, 50, 50),

            Keybind = Color3.fromRGB(130, 50, 50),

            Input = Color3.fromRGB(160, 70, 70),
            InputFocused = Color3.fromRGB(30, 10, 10),
            InputIndicator = Color3.fromRGB(150, 80, 80),

            Dialog = Color3.fromRGB(60, 20, 20),
            DialogHolder = Color3.fromRGB(45, 20, 20),
            DialogHolderLine = Color3.fromRGB(35, 15, 15),
            DialogButton = Color3.fromRGB(70, 30, 30),
            DialogButtonBorder = Color3.fromRGB(90, 40, 40),
            DialogBorder = Color3.fromRGB(80, 30, 30),
            DialogInput = Color3.fromRGB(65, 25, 25),
            DialogInputLine = Color3.fromRGB(160, 80, 80),

            Text = Color3.fromRGB(240, 210, 210),
            SubText = Color3.fromRGB(190, 150, 150),
            Hover = Color3.fromRGB(160, 70, 70),
            HoverChange = 0.08,
        }
    end

    function InterfaceManager:BuildFolderTree()
        local paths = {}

        local parts = self.Folder:split("/")
        for idx = 1, #parts do
            paths[#paths + 1] = table.concat(parts, "/", 1, idx)
        end

        table.insert(paths, self.Folder)
        table.insert(paths, self.Folder .. "/settings")

        for i = 1, #paths do
            local str = paths[i]
            if not isfolder(str) then
                makefolder(str)
            end
        end
    end

    function InterfaceManager:SaveSettings()
        writefile(self.Folder .. "/options.json", httpService:JSONEncode(InterfaceManager.Settings))
    end

    function InterfaceManager:LoadSettings()
        local path = self.Folder .. "/options.json"
        if isfile(path) then
            local data = readfile(path)
            local success, decoded = pcall(httpService.JSONDecode, httpService, data)

            if success then
                for i, v in next, decoded do
                    InterfaceManager.Settings[i] = v
                end
            end
        end
    end

    function InterfaceManager:BuildInterfaceSection(tab)
        assert(self.Library, "Must set InterfaceManager.Library")
        local Library = self.Library
        local Settings = InterfaceManager.Settings

        InterfaceManager:LoadSettings()

        local section = tab:AddSection("Interface")

        local InterfaceTheme = section:AddDropdown("InterfaceTheme", {
            Title = "Theme",
            Description = "Changes the interface theme.",
            Values = Library.Themes,
            Default = Settings.Theme,
            Callback = function(Value)
                Library:SetTheme(Value)
                Settings.Theme = Value
                InterfaceManager:SaveSettings()
            end
        })

        InterfaceTheme:SetValue(Settings.Theme)
    
        if Library.UseAcrylic then
            section:AddToggle("AcrylicToggle", {
                Title = "Acrylic",
                Description = "The blurred background requires graphic quality 8+",
                Default = Settings.Acrylic,
                Callback = function(Value)
                    Library:ToggleAcrylic(Value)
                    Settings.Acrylic = Value
                    InterfaceManager:SaveSettings()
                end
            })
        end
    
        section:AddToggle("TransparentToggle", {
            Title = "Transparency",
            Description = "Makes the interface transparent.",
            Default = Settings.Transparency,
            Callback = function(Value)
                Library:ToggleTransparency(Value)
                Settings.Transparency = Value
                InterfaceManager:SaveSettings()
            end
        })
    
        local MenuKeybind = section:AddKeybind("MenuKeybind", { Title = "Minimize Bind", Default = Settings.MenuKeybind })
        MenuKeybind:OnChanged(function()
            Settings.MenuKeybind = MenuKeybind.Value
            InterfaceManager:SaveSettings()
        end)
        Library.MinimizeKeybind = MenuKeybind
    end
end

return InterfaceManager
